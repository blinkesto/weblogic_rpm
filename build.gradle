import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'org.jetbrains.intellij' version '0.3.0'
}

group 'blinkesto'
version '1.0-SNAPSHOT'

apply plugin: 'groovy'
apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.11'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

intellij {
    version '2017.3.4'
}

patchPluginXml {
    changeNotes """
      Add change notes here.<br>
      <em>most HTML tags may be used</em>"""
}

subprojects {
    version = '1.0'
    def PROJECT_ROOT = rootProject.projectDir.toString()

    ['rpm', 'jar'].each { taskName ->
        taskName
        task "copy_serverspec_$taskName"(type: Copy) {
            def template_src = "templates/serverspec"
            def myProps = new Properties()

            def prop_path = PROJECT_ROOT + "/properties/$os/"
            def prop_file = "weblogic" + "$wls" + ".properties"

            def vm_name = "weblogic-$os-$wls" + taskName

            file(prop_path + prop_file).withInputStream {
                myProps.load(it);
            }

            myProps.os = os
            myProps.wls = wls
            myProps.vm_name = vm_name

            if (taskName == "jar")
                myProps.task_name = "create"
            else
                myProps.task_name = "install"

            def template_dest = PROJECT_ROOT + "/build/$os/" + vm_name
            from(template_src) {
                include 'Rakefile.template'
                include 'spec/*.template'
                include 'spec/default/*.template'
                expand(project: project, myProps: myProps)
                rename('(.*).template', '$1')
            }
            into template_dest
        }
    }

    ['rpm', 'jar'].each { taskName ->
        task "test_$taskName"(type: Exec) {
            def prop_file = "weblogic" + "$wls" + ".properties"
            def prop_path = PROJECT_ROOT + "/properties/$os/"
            def myProps = new Properties()


            file(prop_path + prop_file).withInputStream {
                myProps.load(it);
            }
            dependsOn "copy_serverspec_$taskName"
            workingDir PROJECT_ROOT + "/build/$os/weblogic-$os-$wls" + taskName

            commandLine 'rake', 'spec'
        }
    }

    ['rpm', 'jar'].each { taskName ->
        task "copy_binaries_$taskName"(type: Copy) {
            def prop_file = "weblogic" + "$wls" + ".properties"
            def prop_path = PROJECT_ROOT + "/properties/$os/"
            def myProps = new Properties()


            file(prop_path + prop_file).withInputStream {
                myProps.load(it);
            }
            def template_dest = PROJECT_ROOT + "/build/$os/weblogic-$os-$wls" + taskName + "/files"

            from(PROJECT_ROOT + '/files') {
                include "*"
            }
            into template_dest
        }
    }
}

task test_template (type: Copy){
    def PROJECT_ROOT = rootProject.projectDir.toString()
    def prop_file = "weblogic" + "$wls" + ".properties"
    def prop_path = PROJECT_ROOT + "/properties/$os/"
    def myProps = new Properties()


    file(prop_path + prop_file).withInputStream {
        myProps.load(it);
    }

    doLast {
        from("tmp/weblogic.spec.template"){
            include 'weblogic.spec.template'
            expand(project: project, myProps: myProps)
            rename('(.*).template', '$1')
        }
        into "tmp/"
    }
}
