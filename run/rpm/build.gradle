apply plugin: 'idea'

defaultTasks 'create'

import org.apache.tools.ant.filters.ReplaceTokens

def STAGE_DIR = "/mnt/files"
def PROJECT_ROOT=rootProject.projectDir.toString()
def vm_name = "weblogic-$os-$wls"


task copy_rpm(type: Copy){
    def from_dir = PROJECT_ROOT + "/build/$os/" + vm_name + "jar"
    def to_dir = PROJECT_ROOT + "/build/$os/" + vm_name + "rpm"

    from(from_dir){
        include "*rpm"
    }
    into to_dir
}

task install(type: Exec){
    def prop_path = PROJECT_ROOT + "/properties/$os/"
    def prop_file = "weblogic" + "$wls" + ".properties"
    def myProps = new Properties()

    file(prop_path + prop_file).withInputStream{
        myProps.load(it);
    }
    myProps.setProperty("wls", wls)
    dependsOn "copy_rpm","copy_templates_rpm", "copy_serverspec_rpm"
    workingDir PROJECT_ROOT + "/build/$os/" + vm_name + "rpm"

    //
    commandLine 'vagrant', 'up', '--provision'
}

task halt(type: Exec){
    workingDir PROJECT_ROOT + "/build/$os/" + vm_name + "rpm"

    //
    commandLine 'vagrant', 'halt'
}

task create(type: Exec){
    def prop_path = PROJECT_ROOT + "/properties/$os/"
    def prop_file = "weblogic" + "$wls" + ".properties"
    def myProps = new Properties()

    file(prop_path + prop_file).withInputStream{
        myProps.load(it);
    }
    myProps.setProperty("wls", wls)

    dependsOn "copy_templates_jar", "copy_serverspec_jar"
    workingDir PROJECT_ROOT + "/build/$os/" + vm_name + "jar"

    //
    commandLine 'vagrant', 'provision'
}

['rpm','jar'].each { taskName ->
    task "copy_templates_$taskName"(type: Copy){
        def template_dest = PROJECT_ROOT + "/build/$os/" + vm_name + "$taskName"
        def template_src = "templates"

        def prop_path = PROJECT_ROOT + "/properties/$os/"
        def prop_file = "weblogic" + "$wls" + ".properties"
        def myProps = new Properties()

        def name

        switch(project.wls){
            case ~ /^12\.1.*/:
                name = "fmw-12cR1"
                break
            default:
                name = "fmw-12cR2"
                break
        }

        file(prop_path + prop_file).withInputStream{
            myProps.load(it);
        }
        myProps.setProperty("wls", wls)
        myProps.setProperty("name", name)
        myProps.stage_dir = STAGE_DIR
        myProps.os = os
        myProps.setProperty("install_type", taskName)
        myProps.setProperty("vm_name", vm_name + taskName)
        myProps.project_root = PROJECT_ROOT

        if (taskName == "jar")
            myProps.task_name = "create"
        else
            myProps.task_name = "install"

        from("$template_src"){
            include '*.template'
            // filter(ReplaceTokens, tokens: myProps)
            expand(project: project, myProps: myProps)
            include 'files/rpm/*.template'
            rename('(.*).template', '$1')
        }
        into "$template_dest"
    }
}

['create','install'].each { taskName ->
    task "test_$taskName"(type: Exec) {
        def prop_file = "weblogic" + "$wls" + ".properties"
        def prop_path = PROJECT_ROOT + "/properties/$os/"
        def myProps = new Properties()

        file(prop_path + prop_file).withInputStream {
            myProps.load(it);
        }

        myProps.os = os
        myProps.wls = wls
        myProps.task_name = taskName
        if (taskName == "create")
            workingDir PROJECT_ROOT + "/build/$os/" + vm_name + "jar"
        else
            workingDir PROJECT_ROOT + "/build/$os/" + vm_name + "jar"

        println "RUNNING rake in " + workingDir
        commandLine 'rake', 'spec'
    }
}

